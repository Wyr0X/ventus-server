using System.Collections.Concurrent;
using System.Linq;
using System.Net;
using System.Net.WebSockets;
using FirebaseAdmin.Auth;
using Google.Protobuf;
using Google.Protobuf.WellKnownTypes;
using Protos.Auth;
using Protos.Common;
using VentusServer;

public class WebSocketServerController2
{
    private readonly FirebaseService _firebaseService;
    private readonly ConcurrentDictionary<string, WebSocket> _pendingConnections; // Conexiones pendientes de autenticaci√≥n
    private readonly ConcurrentDictionary<Guid, WebSocket> _websocketsByAccountId;
    private readonly ConcurrentDictionary<string, Guid> _accountIdsByConnectionId;
    private readonly ConcurrentQueue<UserMessagePair> _messageQueue; // Conexiones ya autenticadas
    private readonly MessageHandler _messageHandler; // Conexiones ya autenticadas
    private readonly JwtService _jwtService;

    public WebSocketServerController2(FirebaseService firebaseService, MessageHandler messageHandler, JwtService jwtService)
    {
        _firebaseService = firebaseService;
        _pendingConnections = new ConcurrentDictionary<string, WebSocket>();
        _websocketsByAccountId = new ConcurrentDictionary<Guid, WebSocket>();
        _accountIdsByConnectionId = new ConcurrentDictionary<string, Guid>();
        _messageQueue = new ConcurrentQueue<UserMessagePair>();
        _messageHandler = messageHandler;
        _jwtService = jwtService;
    }

    public async Task StartServerAsync()
    {
        var listener = new HttpListener();
        listener.Prefixes.Add("http://localhost:5331/");
        listener.Start();

        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("‚úÖ Servidor WebSocket iniciado en ws://localhost:6000");
        Console.ResetColor();

        while (true)
        {
            var context = await listener.GetContextAsync();
            if (context.Request.IsWebSocketRequest)
            {
                WebSocket webSocket = (await context.AcceptWebSocketAsync(null)).WebSocket;
                var connectionId = Guid.NewGuid().ToString();

                Console.ForegroundColor = ConsoleColor.Cyan;
                Console.WriteLine($"üÜî Conexi√≥n iniciada con ID √∫nico: {connectionId}");
                Console.ResetColor();

                _pendingConnections[connectionId] = webSocket;

                _ = Task.Run(() => HandleWebSocket(webSocket, connectionId));
            }
            else
            {
                context.Response.StatusCode = 400;
                context.Response.Close();
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("‚ùå Petici√≥n no v√°lida. Respuesta 400.");
                Console.ResetColor();
            }
        }
    }

    public async Task StartLoop()
    {
        while (true)
        {
            ProcessQueue();
            await Task.Delay(100); // Espera de 100 ms (equivalente a 10 FPS, ajusta seg√∫n sea necesario)
        }
    }

    public async void ProcessQueue()
    {
        if (_messageQueue.TryDequeue(out var userMessagePair))
        {
            _messageHandler.HandleIncomingMessage(userMessagePair);
        }
    }

    public async void SendServerPacketByAccountId(Guid accountId, IMessage message)
    {
        if (_websocketsByAccountId.ContainsKey(accountId))
        {
            WebSocket clientSocket = _websocketsByAccountId[accountId];

            byte[] serializedMessage = message.ToByteArray();

            await clientSocket.SendAsync(
                new ArraySegment<byte>(serializedMessage),
                WebSocketMessageType.Binary,
                true,
                CancellationToken.None
            );

            Console.ForegroundColor = ConsoleColor.Yellow;
            Console.ResetColor();
        }
        else
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"‚ùå No se encontr√≥ WebSocket para el usuario {accountId}.");
            Console.ResetColor();
        }
    }
    public async void SendBroadcastServerPacketByAccountId(List<Guid> accountsId, IMessage message)
    {
        foreach (var accountId in accountsId)
        {
            SendServerPacketByAccountId(accountId, message);
        }
    }
    private async Task HandleWebSocket(WebSocket webSocket, string connectionId)
    {
        var buffer = new byte[1024];
        Guid accountId = Guid.Empty;

        try
        {
            WebSocketReceiveResult result;
            using (var ms = new MemoryStream())
            {
                do
                {
                    result = await webSocket.ReceiveAsync(
                        new ArraySegment<byte>(buffer),
                        CancellationToken.None
                    );
                    ms.Write(buffer, 0, result.Count);
                } while (!result.EndOfMessage);

                if (result.MessageType == WebSocketMessageType.Binary)
                {
                    var receivedBytes = ms.ToArray();
                    var clientMessage = ClientMessage.Parser.ParseFrom(receivedBytes);

                    Console.ForegroundColor = ConsoleColor.Magenta;

                    Console.ResetColor();

                    if (clientMessage.MessageCase == ClientMessage.MessageOneofCase.AuthRequest)
                    {
                        var authRequest = clientMessage.AuthRequest;
                        var token = authRequest.Token;

                        try
                        {
                            var validatedAccountIdStr = _jwtService.ValidateToken(token);
                            if (!Guid.TryParse(validatedAccountIdStr, out accountId))
                            {
                                Console.ForegroundColor = ConsoleColor.Yellow;
                                Console.WriteLine("‚ö† Token inv√°lido.");
                                Console.ResetColor();
                                return;
                            }

                            Console.ForegroundColor = ConsoleColor.Green;
                            Console.WriteLine($"üîí Usuario autenticado: {accountId}");
                            Console.ResetColor();

                            if (accountId == Guid.Empty)
                            {
                                Console.WriteLine("Cerrado 2");

                                await webSocket.CloseAsync(
                                    WebSocketCloseStatus.InvalidMessageType,
                                    "Token de Firebase inv√°lido",
                                    CancellationToken.None
                                );
                                return;
                            }

                            if (_pendingConnections.TryRemove(connectionId, out var pendingWebSocket))
                            {
                                _accountIdsByConnectionId[connectionId] = accountId;
                                _websocketsByAccountId[accountId] = pendingWebSocket;

                                Console.ForegroundColor = ConsoleColor.Cyan;
                                Console.WriteLine($"üîó Usuario {accountId} a√±adido a la lista de usuarios autenticados.");
                                Console.ResetColor();
                            }
                        }
                        catch (Exception ex)
                        {
                            Console.ForegroundColor = ConsoleColor.Red;
                            Console.WriteLine($"‚ùå Error al verificar el token: {ex.Message}");
                            Console.ResetColor();
                            Console.WriteLine("Cerrado 3");

                            await webSocket.CloseAsync(
                                WebSocketCloseStatus.InvalidMessageType,
                                "Token de Firebase inv√°lido",
                                CancellationToken.None
                            );
                            return;
                        }
                    }
                }
            }

            while (webSocket.State == WebSocketState.Open)
            {
                var ms = new MemoryStream();
                do
                {
                    result = await webSocket.ReceiveAsync(
                        new ArraySegment<byte>(buffer),
                        CancellationToken.None
                    );
                    ms.Write(buffer, 0, result.Count);
                } while (!result.EndOfMessage);

                var receivedData = ms.ToArray();

                if (_accountIdsByConnectionId.ContainsKey(connectionId) && (accountId != Guid.Empty))
                {
                    var clientMessage = ClientMessage.Parser.ParseFrom(receivedData);

                    accountId = _accountIdsByConnectionId[connectionId];
                    Console.ForegroundColor = ConsoleColor.Magenta;
                    Console.WriteLine($"Llego un paquete del tipo {clientMessage.MessageCase}");
                    Console.ResetColor();

                    if (clientMessage.MessageCase == ClientMessage.MessageOneofCase.ClientMessagePing)
                    {
                        Console.ForegroundColor = ConsoleColor.Cyan;
                        Console.WriteLine("Envio mensaje de Pong");
                        Console.ResetColor();
                        ServerMessagePong serverMessagePong = new ServerMessagePong { Message = "Pong" };
                        ServerMessage serverMessage = new ServerMessage
                        {
                            ServerMessagePong = serverMessagePong
                        };
                        SendServerPacketByAccountId(accountId, serverMessage);
                    }
                    else
                    {
                        UserMessagePair messagePair = new UserMessagePair(accountId, clientMessage);
                        _messageQueue.Enqueue(messagePair);
                        Console.ForegroundColor = ConsoleColor.Blue;
                        Console.ResetColor();
                    }

                }
                else
                {
                    await webSocket.CloseAsync(
                        WebSocketCloseStatus.InvalidMessageType,
                        "Usuario no autenticado",
                        CancellationToken.None
                    );

                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("‚ùå Conexi√≥n no autenticada, cerrando conexi√≥n.");
                    Console.ResetColor();
                }
            }
        }
        catch (Exception ex)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"‚ùå Error en WebSocket: {ex.Message}");
            Console.ResetColor();
        }
        finally
        {
            if (accountId != Guid.Empty)
            {
                _accountIdsByConnectionId.TryRemove(connectionId, out _);
                _websocketsByAccountId.TryRemove(accountId, out _);
                Console.ForegroundColor = ConsoleColor.Yellow;
                Console.WriteLine($"üîå Usuario {accountId} desconectado.");
                Console.ResetColor();
            }
            Console.WriteLine("Cerrado");

            _pendingConnections.TryRemove(connectionId, out _);
            await webSocket.CloseAsync(
                WebSocketCloseStatus.NormalClosure,
                "Conexi√≥n cerrada",
                CancellationToken.None
            );
            webSocket.Dispose();
        }
    }
}
