using System.Net.WebSockets;
using Protos.Game.Movement;
using ProtosCommon;

public class MovementLogic
{
    // L√≥gica para mover al jugador
    public void MovePlayerLogic(UserMessagePair messagePair)
    {
        // L√≥gica para mover al jugador (ejemplo simple)
        ClientMessage clientMessage = messagePair.ClientMessage;
        MoveRequest moveRequest = clientMessage.MessageOauth.ClientMessageGame.MessageMovement.MoveRequest;
        Console.WriteLine($"üö∂‚Äç‚ôÇÔ∏è Jugador movi√©ndose a la posici√≥n ({moveRequest.X}, {moveRequest.Y})");

        // Aqu√≠ validar√≠amos si el movimiento es v√°lido, sin colisiones o restricciones.

        // Crear la respuesta del movimiento
        var moveResponse = new MoveResponse
        {
            Success = true,
            Reason = "Movimiento exitoso"
        };

        // Enviar la respuesta de movimiento al cliente
        SendMovementResult(moveResponse, webSocket);

        // Notificar a los dem√°s jugadores que el jugador se ha movido
        var playerMoved = new PlayerMoved
        {
            PlayerId = 1,  // ID del jugador
            X = moveRequest.X,
            Y = moveRequest.Y
        };

        // Aqu√≠ enviar√≠amos el movimiento al resto de jugadores
        BroadcastMovement(playerMoved);
    }

    // L√≥gica para cambiar la direcci√≥n del jugador
    public void ChangePlayerDirectionLogic(ChangeDirectionRequest changeDirectionRequest, WebSocket webSocket)
    {
        // L√≥gica para cambiar la direcci√≥n (ejemplo simple)
        Console.WriteLine($"üß≠ Jugador cambiando la direcci√≥n a {changeDirectionRequest.Direction}");

        // Crear la respuesta de cambio de direcci√≥n
        var playerDirectionChanged = new PlayerDirectionChanged
        {
            PlayerId = 1,  // ID del jugador
            Direction = changeDirectionRequest.Direction
        };

        // Aqu√≠ enviar√≠amos el resultado del cambio de direcci√≥n al cliente
        SendMovementResult(playerDirectionChanged, webSocket);
    }

    // M√©todo para enviar el resultado de la acci√≥n de movimiento al cliente
    private void SendMovementResult(object movementResult, WebSocket webSocket)
    {
        // Aqu√≠ enviar√≠amos el resultado de la ejecuci√≥n del movimiento al cliente a trav√©s del WebSocket
        Console.WriteLine($"üì¢ Resultado de la acci√≥n de movimiento: {movementResult.ToString()}");
    }

    // M√©todo para notificar a otros jugadores que un jugador se ha movido
    private void BroadcastMovement(PlayerMoved playerMoved)
    {
        // Aqu√≠ se enviar√≠a a todos los jugadores conectados (excepto al jugador que se movi√≥)
        Console.WriteLine($"üì£ Jugador {playerMoved.PlayerId} se ha movido a ({playerMoved.X}, {playerMoved.Y})");
    }
}
