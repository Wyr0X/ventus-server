using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using System;
using System.Threading.Tasks;
using VentusServer.Services;

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]
public class RequirePermissionAttribute : Attribute, IAsyncAuthorizationFilter
{
    private readonly string _requiredPermission;

    public RequirePermissionAttribute(string requiredPermission)
    {
        _requiredPermission = requiredPermission;
    }

    public async Task OnAuthorizationAsync(AuthorizationFilterContext context)
    {
        // Obten√© el servicio desde el contenedor
        var permissionService = context.HttpContext.RequestServices.GetService(typeof(IPermissionService)) as IPermissionService;

        if (permissionService == null)
        {
            context.Result = new StatusCodeResult(500); // Internal Server Error si algo falla feo
            return;
        }

        var userIdClaim = context.HttpContext.User.FindFirst("account_id");
        if (userIdClaim == null || !Guid.TryParse(userIdClaim.Value, out var accountId))
        {
            context.Result = new UnauthorizedResult();
            return;
        }

        var hasPermission = await permissionService.HasPermissionAsync(accountId, _requiredPermission);
        if (!hasPermission)
        {
            context.Result = new ForbidResult();
        }
    }
}
